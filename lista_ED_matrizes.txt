ITEM VI:
float *DiagPrin(int n,int m, float **Ma)//MOSTRA A DIAGONAL PRINCIPAL DA MATRIZ
{
    nDiag = n;
    if(nDiag>m){
        nDiag=m;
    }
    float *vetDiag = (float*)malloc(sizeof(float)*nDiag);
    if(vetDiag == NULL){
        printf("vetor nulo");
    }
    int s=0;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(i==j){
                vetDiag[s]=Ma[i][j];
                s++;

            }
        }
    }
    return vetDiag;
}



ITEM III:
float *RetornaLinha(int n,int m,float **Mat, int k){//RETORNA A LINHA K
    float *vetor = (float*)malloc(sizeof(float)*m);
    if(Mat!=NULL && k<n && k>=0){
        for(int i=0;i<m;i++){
            vetor[i] = Mat[k][i];
        }
    }
    return vetor;
}



ITEM V:
/*Retorna um vetor com elementos da coluna k*/
float *RetornaColuna(int n,int m, float **Mc, int k){//RETORNA A COLUNA K
    float *vet = (float*)malloc(sizeof(float)*n);
    if(Mc!=NULL && k<m&& k>=0){
        for(int i=0;i<n;i++){
            vet[i] = Mc[i][k];
        }
    }
    return vet;
}


ITEM II:
float* Transposta(int n, int m, float* vma){
	float *vtransp;
	if(vma!=NULL){
		vtransp = (float*)malloc(sizeof(float)*n*m);
		if(vtransp!=NULL){
			for(int i=0; i<n; i++){
				for(int j=0; j<m; j++){
					vtransp[m*i+j]=vma[m*j+i];
				}
			}
			return vtransp;	
		}
		free(vtransp);	
	}
	return NULL;
	
}


